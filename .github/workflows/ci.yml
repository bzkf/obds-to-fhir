name: ci

on:
  push:
    branches:
      - master
      - beta
  release:
    types:
      - created
  pull_request:
    branches:
      - master
      - beta
  merge_group:
    types:
      - checks_requested
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    uses: miracum/.github/.github/workflows/standard-build.yaml@53643b5d3c785e94d5d6a1c4119a15d4a3970e26 # v1.16.28
    permissions:
      contents: write
      id-token: write
      packages: write
      pull-requests: write
      actions: read
      security-events: write
    with:
      enable-build-test-layer: true
      enable-upload-test-image: true
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  add-test-coverage:
    name: add test coverage to PR
    runs-on: ubuntu-24.04
    needs:
      - build
    permissions:
      # for add Coverage PR Comment
      pull-requests: write
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      # <https://docs.docker.com/storage/containerd/>
      # via <https://github.com/docker/setup-buildx-action/issues/257>
      - name: Set up containerd image store
        shell: bash
        run: |
          jq '. | .+{"features": {"containerd-snapshotter": true}}' /etc/docker/daemon.json > /tmp/docker-daemon-with-containerd.json
          sudo mv /tmp/docker-daemon-with-containerd.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'

      - name: Download test image
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.build.outputs.image-slug }}-test
          path: /tmp

      - name: Load test image
        run: |
          docker load --input /tmp/image-test.tar
          docker image ls

      - name: Copy unit test coverage reports from test container
        env:
          UNIT_TEST_IMAGE: ${{ fromJson(needs.build.outputs.test-image-meta-json).tags[0] }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          docker create --name=unit-test-container "${UNIT_TEST_IMAGE}"
          docker cp unit-test-container:/test "${GITHUB_WORKSPACE}/test"

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@50d3aff4548aa991e6753342d9ba291084e63848 # v1.7.2
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          paths: |
            ${GITHUB_WORKSPACE}/test/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          update-comment: true
          title: "## Code Coverage Report"

  test-compose-process-from-directory:
    name: test compose processing files from directory
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'pull_request' || github.ref_name == 'beta' }}
    needs:
      - build
    permissions:
      contents: read
    env:
      INPUT_DIRECTORY: ${{ github.workspace }}/src/test/resources/obds3/
      OUTPUT_DIRECTORY: ${{ github.workspace }}/tests/compose/fhir-output/
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      # <https://docs.docker.com/storage/containerd/>
      # via <https://github.com/docker/setup-buildx-action/issues/257>
      - name: Set up containerd image store
        shell: bash
        run: |
          [ -f /etc/docker/daemon.json ] || echo "{}" | sudo tee /etc/docker/daemon.json
          jq '. | .+{"features": {"containerd-snapshotter": true}}' /etc/docker/daemon.json > /tmp/docker-daemon-with-containerd.json
          sudo mv /tmp/docker-daemon-with-containerd.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Download image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.build.outputs.image-slug }}
          path: /tmp

      - name: Load image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker load --input /tmp/image.tar
          docker image ls

      - name: Run obds-to-fhir
        env:
          OBDS_TO_FHIR_VERSION: ${{ needs.build.outputs.image-version }}
        run: |
          mkdir -p "${OUTPUT_DIRECTORY}"
          USER_ID="$(id -u)" GROUP_ID="$(id -g)" \
            docker compose \
            -f deploy/compose.yaml \
            -f tests/compose/compose.yaml \
            -f deploy/compose.process-from-directory.yaml \
            run obds-to-fhir

      - name: Make sure the FHIR bundles appear in the output dir
        run: |
          ls -lsa "$OUTPUT_DIRECTORY"
          if find "$OUTPUT_DIRECTORY" -type f -name "*.fhir.json" -print -quit | grep -q .; then
              echo "Output FHIR bundles found"
          else
              echo "No files found"
              exit 1
          fi

      - name: Print compose logs
        if: always()
        env:
          OBDS_TO_FHIR_VERSION: ${{ needs.build.outputs.image-version }}
        run: |
          docker compose \
            -f deploy/compose.yaml \
            -f tests/compose/compose.yaml \
            -f deploy/compose.process-from-directory.yaml logs

  test-compose-process-from-directory-v2-to-v3:
    name: test compose processing files from directory with v2 to v3 conversion
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'pull_request' || github.ref_name == 'beta' }}
    needs:
      - build
    permissions:
      contents: read
    env:
      INPUT_DIRECTORY: ${{ github.workspace }}/src/test/resources/adt/
      OUTPUT_DIRECTORY: ${{ github.workspace }}/tests/compose/fhir-output/
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      # <https://docs.docker.com/storage/containerd/>
      # via <https://github.com/docker/setup-buildx-action/issues/257>
      - name: Set up containerd image store
        shell: bash
        run: |
          [ -f /etc/docker/daemon.json ] || echo "{}" | sudo tee /etc/docker/daemon.json
          jq '. | .+{"features": {"containerd-snapshotter": true}}' /etc/docker/daemon.json > /tmp/docker-daemon-with-containerd.json
          sudo mv /tmp/docker-daemon-with-containerd.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Download image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.build.outputs.image-slug }}
          path: /tmp

      - name: Load image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker load --input /tmp/image.tar
          docker image ls

      - name: Run obds-to-fhir
        env:
          OBDS_TO_FHIR_VERSION: ${{ needs.build.outputs.image-version }}
        run: |
          mkdir -p "${OUTPUT_DIRECTORY}"
          USER_ID="$(id -u)" GROUP_ID="$(id -g)" \
            docker compose \
            -f deploy/compose.yaml \
            -f tests/compose/compose.yaml \
            -f deploy/compose.process-from-directory.yaml \
            run obds-to-fhir

      - name: Make sure the FHIR bundles appear in the output dir
        run: |
          ls -lsa "$OUTPUT_DIRECTORY"
          if find "$OUTPUT_DIRECTORY" -type f -name "*.fhir.json" -print -quit | grep -q .; then
              echo "Output FHIR bundles found"
          else
              echo "No files found"
              exit 1
          fi

      - name: Print compose logs
        if: always()
        env:
          OBDS_TO_FHIR_VERSION: ${{ needs.build.outputs.image-version }}
        run: |
          docker compose \
            -f deploy/compose.yaml \
            -f tests/compose/compose.yaml \
            -f deploy/compose.process-from-directory.yaml logs

  test:
    name: run k8s smoke test
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'pull_request' || github.ref_name == 'beta' }}
    needs:
      - build
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Create KinD cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          cluster_name: kind

      - name: Download image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.build.outputs.image-slug }}
          path: /tmp

      - name: Load image into KinD
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          kind load image-archive /tmp/image.tar
          # list images in cluster
          docker exec kind-control-plane crictl images

      - name: Install test chart
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-version }}
        run: |
          helm dep up tests/k8s

          # start by first installing the Strimzi and Prometheus operators
          helm upgrade --install \
            --set "stream-processors.enabled=false" \
            --wait \
            --timeout=10m \
            --debug \
            obds-to-fhir-test \
            tests/k8s

          kubectl wait kafka/obds-to-fhir-kafka --for=condition=Ready --timeout=300s

          # install the actual obds-to-fhir stream processor
          helm upgrade --install \
            --set "stream-processors.enabled=true" \
            --set "stream-processors.processors.obds-to-fhir.container.image.tag=${IMAGE_TAG}" \
            --wait \
            --timeout=10m \
            --debug \
            obds-to-fhir-test \
            tests/k8s

      - name: Run Helm test to make sure everything started correctly
        run: |
          helm test obds-to-fhir-test

      - name: Print cluster logs
        if: always()
        run: |
          kubectl cluster-info dump -o yaml | tee kind-cluster-dump.txt

      - name: Upload cluster dump
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: kind-cluster-dump.txt
          path: |
            kind-cluster-dump.txt

  lint:
    uses: miracum/.github/.github/workflows/standard-lint.yaml@53643b5d3c785e94d5d6a1c4119a15d4a3970e26 # v1.16.28
    permissions:
      contents: read
      pull-requests: write
      issues: write
      security-events: write
      actions: read
    with:
      codeql-languages: '["java"]'
      enable-codeql: true
      java-version: "21"
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  release:
    uses: miracum/.github/.github/workflows/standard-release.yaml@53643b5d3c785e94d5d6a1c4119a15d4a3970e26 # v1.16.28
    needs:
      - lint
      - build
    permissions:
      contents: write
      pull-requests: write
      issues: write
    with:
      use-app-token: true
    secrets:
      app-token-app-id: ${{ secrets.RELEASER_APP_ID }}
      app-token-private-key: ${{ secrets.RELEASER_APP_PRIVATE_KEY }}
