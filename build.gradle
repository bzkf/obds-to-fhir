plugins {
    id 'org.springframework.boot' version '3.5.7'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'java'
    id 'com.diffplug.spotless' version '8.0.0'
    id 'io.freefair.lombok' version '9.0.0'
    id 'net.ltgt.errorprone' version '4.3.0'
}

group = 'org.miracum.streams.ume'
version = '3.0.0-beta.119'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    xsd2java

    // Configuration for changing snapshot dependencies
    // Update every hour
    configureEach {
        resolutionStrategy.cacheChangingModulesFor(1, java.util.concurrent.TimeUnit.HOURS)
    }
}

repositories {
    mavenCentral()
    maven {
        url = 'https://git.dnpm.dev/api/packages/public-snapshots/maven'
    }
}

ext {
    set('springCloudVersion', '2025.0.0')
    set('hapiVersion', '8.4.0')
    jaxbTargetDir = file('src/generated/java')
}

sourceSets {
    main {
        java {
            srcDirs jaxbTargetDir
        }
    }
}

dependencies {
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "ca.uhn.hapi.fhir:hapi-fhir-structures-r4:${hapiVersion}"
    implementation 'io.micrometer:micrometer-registry-prometheus:1.15.5'
    implementation 'io.micrometer:micrometer-core:1.15.5'
    implementation 'org.miracum:kafka-fhir-serializer:2.0.6'
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'org.scala-lang:scala-library:2.13.17'
    implementation 'com.github.slugify:slugify:3.0.7'
    implementation 'commons-codec:commons-codec:1.19.0'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    // Jackson v3 supports Optional out-of-the-box but isn't yet provided by Spring Boot by default
    // <https://github.com/FasterXML/jackson-modules-java8>
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations'

    // OBDS2 to OBDS3
    implementation('dev.pcvolkmer.onco:obds2-to-obds3:0.1.0-SNAPSHOT') { changing = true }

    // JAXB code generation
    xsd2java 'com.sun.xml.bind:jaxb-xjc:4.0.6'
    xsd2java 'com.sun.xml.bind:jaxb-impl:4.0.6'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation:${hapiVersion}"
    testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:${hapiVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'com.approvaltests:approvaltests:25.7.0'
    testImplementation 'org.apache.kafka:kafka-streams-test-utils'

    errorprone 'com.google.errorprone:error_prone_core:2.43.0'
    errorprone 'com.uber.nullaway:nullaway:0.12.10'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.14'
}

spotless {
    java {
        target('**/*.java')
        targetExclude('src/generated/java/**/*.*')
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}

jacocoTestReport {
    reports {
        csv.required = true
        html.required = true
        xml.required = true
    }
}

jar {
    enabled = false
}

tasks.register('xsd2java') {
    doLast {
        jaxbTargetDir.mkdirs()

        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xsd2java.asPath)
        ant.jaxbTargetDir = jaxbTargetDir

        ant.xjc(
                destdir: "${jaxbTargetDir}",
                package: 'de.basisdatensatz.obds.v3',
                schema: 'src/main/resources/schema/oBDS_v3.0.4.xsd',
                binding: 'src/main/resources/schema/oBDS_v3.0.4.bindings.xjb'
        )
    }
}
compileJava.dependsOn xsd2java

import net.ltgt.gradle.errorprone.CheckSeverity

tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        check('NullAway', CheckSeverity.WARN)
        option('NullAway:AnnotatedPackages', 'org.miracum')
    }
    options.errorprone.disableWarningsInGeneratedCode = true
    // ignore legacy mappers code
    // MeldungExportV3 causes an errorprone exception - likely because it can't handle all the lombok annotations
    options.errorprone.errorproneArgs.add('-XepExcludedPaths:(.*/ADT_GEKID\\.java|.*/MeldungExportV3\\.java'
        + '|.*/lookup/.*|.*/mapper/\\w*\\.java)')
}
