plugins {
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'java'
	id 'com.diffplug.spotless' version '6.25.0'
	id "io.freefair.lombok" version "8.4"
}

group = 'org.miracum.streams.ume'
version = '2.0.16'
sourceCompatibility = '17'
targetCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
	set('hapiVersion', "6.10.4")
}

dependencies {
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "ca.uhn.hapi.fhir:hapi-fhir-structures-r4:${hapiVersion}"
	implementation 'io.micrometer:micrometer-registry-prometheus:1.12.2'
	implementation 'io.micrometer:micrometer-core:1.12.2'
	implementation "org.miracum:kafka-fhir-serializer:1.0.4"
	implementation "org.apache.commons:commons-text:1.11.0"
	implementation "org.scala-lang:scala-library:2.13.12"

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation:${hapiVersion}"
	testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:${hapiVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.cloud:spring-cloud-stream-test-support"
	testImplementation "com.approvaltests:approvaltests:22.3.3"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.11"
}

spotless {
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat()
	}
}

jacocoTestReport {
	reports {
		csv.outputLocation = file(layout.buildDirectory.dir('jacoco/coverage.csv'))
		csv.required = true
		html.outputLocation = file(layout.buildDirectory.dir('jacoco/coverage.html'))
		html.required = true
		xml.required = false
	}
}

jar {
	enabled = false
}
