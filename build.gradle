plugins {
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'java'
	id 'com.diffplug.spotless' version '6.25.0'
	id "io.freefair.lombok" version "8.10"
}

group = 'org.miracum.streams.ume'
version = '2.3.0-beta.2'
sourceCompatibility = '21'
targetCompatibility = '21'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	xsd2java
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
	set('hapiVersion', "7.4.0")
	jaxbTargetDir = file("src/generated/java")
}

sourceSets {
	main {
		java {
			srcDirs jaxbTargetDir
		}
	}
}

dependencies {
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "ca.uhn.hapi.fhir:hapi-fhir-structures-r4:${hapiVersion}"
	implementation 'io.micrometer:micrometer-registry-prometheus:1.13.3'
	implementation 'io.micrometer:micrometer-core:1.13.3'
	implementation "org.miracum:kafka-fhir-serializer:1.0.6"
	implementation "org.apache.commons:commons-text:1.12.0"
	implementation "org.scala-lang:scala-library:2.13.14"

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	// Jackson v3 supports Optional out-of-the-box but isn't yet provided by Spring Boot by default
	// <https://github.com/FasterXML/jackson-modules-java8>
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
	implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations'

	// JAXB code generation
	xsd2java "com.sun.xml.bind:jaxb-xjc:4.0.5"
	xsd2java "com.sun.xml.bind:jaxb-impl:4.0.5"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation:${hapiVersion}"
	testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:${hapiVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.cloud:spring-cloud-stream-test-support"
	testImplementation "com.approvaltests:approvaltests:24.4.0"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.12"
}

spotless {
	java {
		target("**/*.java")
		targetExclude("src/generated/java/**/*.*")
		importOrder()
		removeUnusedImports()
		googleJavaFormat()
	}
}

jacocoTestReport {
	reports {
		csv.required = true
		html.required = true
		xml.required = true
	}
}

jar {
	enabled = false
}

tasks.register('xsd2java') {

	doLast {
		jaxbTargetDir.mkdirs()

		ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xsd2java.asPath)
		ant.jaxbTargetDir = jaxbTargetDir


		ant.xjc(
				destdir: "${jaxbTargetDir}",
				package: 'de.basisdatensatz.obds.v3',
				schema: 'src/main/resources/schema/oBDS_v3.0.3.xsd',
				binding: 'src/main/resources/schema/oBDS_v3.0.3.bindings.xjb'
		)

	}
}
compileJava.dependsOn xsd2java
